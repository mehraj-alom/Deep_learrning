{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12564000,"sourceType":"datasetVersion","datasetId":7933893},{"sourceId":12564008,"sourceType":"datasetVersion","datasetId":7933901}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:49:28.910659Z","iopub.execute_input":"2025-07-24T13:49:28.911142Z","iopub.status.idle":"2025-07-24T13:49:29.189043Z","shell.execute_reply.started":"2025-07-24T13:49:28.911118Z","shell.execute_reply":"2025-07-24T13:49:29.188460Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/dogs-in-dogs/dog_images.csv\n/kaggle/input/cats-in-cats/Cats.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import tensorflow as tf\ndaily_sales_numbers = [21, 22, -108, 31, -1, 32, 34,31]\ntf_dataset = tf.data.Dataset.from_tensor_slices(daily_sales_numbers)\ntf_dataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:49:29.190089Z","iopub.execute_input":"2025-07-24T13:49:29.190432Z","iopub.status.idle":"2025-07-24T13:49:50.910911Z","shell.execute_reply.started":"2025-07-24T13:49:29.190413Z","shell.execute_reply":"2025-07-24T13:49:50.910172Z"}},"outputs":[{"name":"stderr","text":"2025-07-24 13:49:32.351789: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1753364972.711155      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1753364972.820316      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nI0000 00:00:1753364990.878873      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 13942 MB memory:  -> device: 0, name: Tesla T4, pci bus id: 0000:00:04.0, compute capability: 7.5\nI0000 00:00:1753364990.879587      36 gpu_device.cc:2022] Created device /job:localhost/replica:0/task:0/device:GPU:1 with 13942 MB memory:  -> device: 1, name: Tesla T4, pci bus id: 0000:00:05.0, compute capability: 7.5\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"<_TensorSliceDataset element_spec=TensorSpec(shape=(), dtype=tf.int32, name=None)>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"for data in tf_dataset.take(4):\n    print(data.numpy())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:49:50.911696Z","iopub.execute_input":"2025-07-24T13:49:50.912088Z","iopub.status.idle":"2025-07-24T13:49:50.982905Z","shell.execute_reply.started":"2025-07-24T13:49:50.912069Z","shell.execute_reply":"2025-07-24T13:49:50.982363Z"}},"outputs":[{"name":"stdout","text":"21\n22\n-108\n31\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"tf_dataset = tf_dataset.filter(lambda x : x>0).map(lambda y : y/255).shuffle(3).batch(2)\nfor data in tf_dataset.take(4).as_numpy_iterator():\n    print(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:49:50.984647Z","iopub.execute_input":"2025-07-24T13:49:50.984852Z","iopub.status.idle":"2025-07-24T13:49:51.081411Z","shell.execute_reply.started":"2025-07-24T13:49:50.984835Z","shell.execute_reply":"2025-07-24T13:49:51.080777Z"}},"outputs":[{"name":"stdout","text":"[0.08235294 0.12156863]\n[0.1254902  0.12156863]\n[0.13333333 0.08627451]\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import pandas as pd \ndf_cats = pd.read_csv(\"/kaggle/input/cats-in-cats/Cats.csv\")\ndf_dogs = pd.read_csv(\"/kaggle/input/dogs-in-dogs/dog_images.csv\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:49:51.081957Z","iopub.execute_input":"2025-07-24T13:49:51.082125Z","iopub.status.idle":"2025-07-24T13:49:51.105876Z","shell.execute_reply.started":"2025-07-24T13:49:51.082111Z","shell.execute_reply":"2025-07-24T13:49:51.105422Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"print(\"Cat CSV Columns:\", df_cats.columns)\nprint(\"Dog CSV Columns:\", df_dogs.columns)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:49:51.106615Z","iopub.execute_input":"2025-07-24T13:49:51.106879Z","iopub.status.idle":"2025-07-24T13:49:51.112984Z","shell.execute_reply.started":"2025-07-24T13:49:51.106855Z","shell.execute_reply":"2025-07-24T13:49:51.112201Z"}},"outputs":[{"name":"stdout","text":"Cat CSV Columns: Index(['id', 'Name', 'Minimum Life Span', 'Maximum Life Span',\n       'Minimum Weight', 'Maximum Weight', 'Temperament', 'Origin', 'Image'],\n      dtype='object')\nDog CSV Columns: Index(['id', 'url', 'breed'], dtype='object')\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"\ndf_cats = df_cats.rename(columns={\n    \"Image\" : \"url\"\n})\ndf_cats[\"label\"] = 0\ndf_dogs[\"label\"] = 1\n\ndf_all = pd.concat([df_dogs[[\"url\",\"label\"]],df_cats[[\"url\",\"label\"]]],ignore_index=True)\nfile_path = df_all[\"url\"].values\nlabel = df_all[\"label\"].values\n\ndataset = tf.data.Dataset.from_tensor_slices((file_path,label))\n\ndef load_and_preprocess_image(path, label):\n    image = tf.io.read_file(path)\n    image = tf.image.decode_jpeg(image, channels=3)\n    image = tf.image.resize(image, [224, 224])\n    image = image / 255.0\n    return image, label\n\npipeline = (\n    dataset\n    .shuffle(buffer_size=100)\n    .map(load_and_preprocess_image, num_parallel_calls=tf.data.AUTOTUNE)\n    .batch(32)\n    .prefetch(tf.data.AUTOTUNE)\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:53:39.466436Z","iopub.execute_input":"2025-07-24T13:53:39.466698Z","iopub.status.idle":"2025-07-24T13:53:39.532137Z","shell.execute_reply.started":"2025-07-24T13:53:39.466679Z","shell.execute_reply":"2025-07-24T13:53:39.531584Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"for file_paths , label in dataset.take(3).as_numpy_iterator():\n    print(file_paths)\n    print(\"***\",label)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:53:43.038328Z","iopub.execute_input":"2025-07-24T13:53:43.038594Z","iopub.status.idle":"2025-07-24T13:53:43.051415Z","shell.execute_reply.started":"2025-07-24T13:53:43.038564Z","shell.execute_reply":"2025-07-24T13:53:43.050668Z"}},"outputs":[{"name":"stdout","text":"b'https://place.dog/400/300?id=1'\n*** 1\nb'https://place.dog/400/300?id=2'\n*** 1\nb'https://place.dog/400/300?id=3'\n*** 1\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-24T13:55:06.362042Z","iopub.execute_input":"2025-07-24T13:55:06.362408Z","iopub.status.idle":"2025-07-24T13:55:06.401129Z","shell.execute_reply.started":"2025-07-24T13:55:06.362385Z","shell.execute_reply":"2025-07-24T13:55:06.400296Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnimplementedError\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/2614898355.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mimage\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpipeline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshoe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    824\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__next__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    825\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 826\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_internal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    827\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOutOfRangeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    828\u001b[0m       \u001b[0;32mraise\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/data/ops/iterator_ops.py\u001b[0m in \u001b[0;36m_next_internal\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    774\u001b[0m     \u001b[0;31m# to communicate that there is no more data to iterate over.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    775\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecution_mode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSYNC\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 776\u001b[0;31m       ret = gen_dataset_ops.iterator_get_next(\n\u001b[0m\u001b[1;32m    777\u001b[0m           \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterator_resource\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m           \u001b[0moutput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flat_output_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/ops/gen_dataset_ops.py\u001b[0m in \u001b[0;36miterator_get_next\u001b[0;34m(iterator, output_types, output_shapes, name)\u001b[0m\n\u001b[1;32m   3084\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0m_result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3085\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3086\u001b[0;31m       \u001b[0m_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3087\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0m_core\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_FallbackException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3088\u001b[0m       \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36mraise_from_not_ok_status\u001b[0;34m(e, name)\u001b[0m\n\u001b[1;32m   6000\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mraise_from_not_ok_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mNoReturn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6001\u001b[0m   \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\" name: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6002\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6003\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mUnimplementedError\u001b[0m: {{function_node __wrapped__IteratorGetNext_output_types_2_device_/job:localhost/replica:0/task:0/device:CPU:0}} File system scheme 'https' not implemented (file: 'https://place.dog/400/300?id=19')\n\t [[{{node ReadFile}}]] [Op:IteratorGetNext] name: "],"ename":"UnimplementedError","evalue":"{{function_node __wrapped__IteratorGetNext_output_types_2_device_/job:localhost/replica:0/task:0/device:CPU:0}} File system scheme 'https' not implemented (file: 'https://place.dog/400/300?id=19')\n\t [[{{node ReadFile}}]] [Op:IteratorGetNext] name: ","output_type":"error"}],"execution_count":18}]}
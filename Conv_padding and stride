{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-09T13:52:26.176731Z","iopub.execute_input":"2025-07-09T13:52:26.177064Z","iopub.status.idle":"2025-07-09T13:52:28.451344Z","shell.execute_reply.started":"2025-07-09T13:52:26.177035Z","shell.execute_reply":"2025-07-09T13:52:28.450478Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import tensorflow as tf\n\n(x_train, y_train), _ = tf.keras.datasets.mnist.load_data()\n\n# Normalizeation\nx_train = x_train.astype(\"float32\") / 255.0\nx_train = x_train[..., tf.newaxis]  # Shape: (num_samples, 28, 28, 1)\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Input(shape=(28, 28, 1)),\n    tf.keras.layers.Conv2D(\n        filters=32,\n        kernel_size=(3, 3),\n        strides=(2, 2),         # Stride of 2\n        padding='same',         # 'same' or 'valid' padding\n        activation='relu'\n    )\n])\n\n\noutput = model(x_train[:1])  \n\nprint(\"Input shape:\", x_train[:1].shape)\nprint(\"Output shape after Conv2D:\", output.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-09T13:52:28.452598Z","iopub.execute_input":"2025-07-09T13:52:28.453347Z","iopub.status.idle":"2025-07-09T13:52:47.993250Z","shell.execute_reply.started":"2025-07-09T13:52:28.453313Z","shell.execute_reply":"2025-07-09T13:52:47.992230Z"}},"outputs":[{"name":"stderr","text":"2025-07-09 13:52:30.246960: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1752069150.473911      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1752069150.539332      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 0us/step\nInput shape: (1, 28, 28, 1)\nOutput shape after Conv2D: (1, 14, 14, 32)\n","output_type":"stream"},{"name":"stderr","text":"2025-07-09 13:52:47.857742: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n","output_type":"stream"}],"execution_count":2}]}
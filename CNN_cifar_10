{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":31041,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:22:07.394240Z","iopub.execute_input":"2025-07-07T07:22:07.394824Z","iopub.status.idle":"2025-07-07T07:22:07.400662Z","shell.execute_reply.started":"2025-07-07T07:22:07.394790Z","shell.execute_reply":"2025-07-07T07:22:07.399665Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import datasets, layers, models\nimport matplotlib.pyplot as plt\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:22:07.402124Z","iopub.execute_input":"2025-07-07T07:22:07.403151Z","iopub.status.idle":"2025-07-07T07:22:07.416586Z","shell.execute_reply.started":"2025-07-07T07:22:07.403122Z","shell.execute_reply":"2025-07-07T07:22:07.415778Z"}},"outputs":[],"execution_count":38},{"cell_type":"code","source":"(X_train,y_train),(X_test,y_test) = datasets.cifar10.load_data()\nX_train.shape,y_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:22:07.456637Z","iopub.execute_input":"2025-07-07T07:22:07.457613Z","iopub.status.idle":"2025-07-07T07:22:10.130971Z","shell.execute_reply.started":"2025-07-07T07:22:07.457581Z","shell.execute_reply":"2025-07-07T07:22:10.130201Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"((50000, 32, 32, 3), (10000, 1))"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"y_train = y_train.reshape(-1,)\ny_train[0:5]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:22:10.132255Z","iopub.execute_input":"2025-07-07T07:22:10.132645Z","iopub.status.idle":"2025-07-07T07:22:10.137916Z","shell.execute_reply.started":"2025-07-07T07:22:10.132627Z","shell.execute_reply":"2025-07-07T07:22:10.137252Z"}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"array([6, 9, 9, 4, 1], dtype=uint8)"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"plt.figure(figsize=(2,4))\nplt.imshow(X_train[5]),\nplt.imshow(X_train[3])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:22:10.138954Z","iopub.execute_input":"2025-07-07T07:22:10.139226Z","iopub.status.idle":"2025-07-07T07:22:10.917311Z","shell.execute_reply.started":"2025-07-07T07:22:10.139208Z","shell.execute_reply":"2025-07-07T07:22:10.916480Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"<matplotlib.image.AxesImage at 0x7a97fc64a310>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 200x400 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"plt.figure(figsize=(2,4))\nplt.imshow(X_train[0]),","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:22:10.919381Z","iopub.execute_input":"2025-07-07T07:22:10.919640Z","iopub.status.idle":"2025-07-07T07:22:11.025809Z","shell.execute_reply.started":"2025-07-07T07:22:10.919622Z","shell.execute_reply":"2025-07-07T07:22:11.025188Z"}},"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"(<matplotlib.image.AxesImage at 0x7a983b4a42d0>,)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 200x400 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":42},{"cell_type":"markdown","source":"**Normalizing Training Data**","metadata":{}},{"cell_type":"code","source":"X_train = X_train / 255.0\nX_test = X_test / 255.0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:22:11.026494Z","iopub.execute_input":"2025-07-07T07:22:11.026760Z","iopub.status.idle":"2025-07-07T07:22:11.520473Z","shell.execute_reply.started":"2025-07-07T07:22:11.026731Z","shell.execute_reply":"2025-07-07T07:22:11.519598Z"}},"outputs":[],"execution_count":43},{"cell_type":"markdown","source":"**SIMPLE ANN**","metadata":{}},{"cell_type":"code","source":"ann = models.Sequential([\n    layers.Flatten(input_shape=(32,32,3)),\n    layers.Dense(3000,activation=\"relu\"),\n    layers.Dense(1000,activation=\"relu\"),\n    layers.Dense(10,activation=\"softmax\")\n])\nann.compile(\n    optimizer=\"adam\",\n    loss=\"sparse_categorical_crossentropy\",\n    metrics=[\"accuracy\"]\n)\nann.fit(X_train,y_train,epochs=10)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:22:11.521686Z","iopub.execute_input":"2025-07-07T07:22:11.521900Z","iopub.status.idle":"2025-07-07T07:23:22.523040Z","shell.execute_reply.started":"2025-07-07T07:22:11.521862Z","shell.execute_reply":"2025-07-07T07:23:22.522365Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/layers/reshaping/flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(**kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 5ms/step - accuracy: 0.2760 - loss: 2.2452\nEpoch 2/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.3948 - loss: 1.6779\nEpoch 3/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.4286 - loss: 1.5961\nEpoch 4/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.4480 - loss: 1.5428\nEpoch 5/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.4622 - loss: 1.4959\nEpoch 6/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.4755 - loss: 1.4584\nEpoch 7/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.4837 - loss: 1.4434\nEpoch 8/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.4930 - loss: 1.4107\nEpoch 9/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.5013 - loss: 1.3888\nEpoch 10/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.5110 - loss: 1.3682\n","output_type":"stream"},{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7a97fc629b50>"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"ann.evaluate(X_test,y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:23:22.523805Z","iopub.execute_input":"2025-07-07T07:23:22.524124Z","iopub.status.idle":"2025-07-07T07:23:24.251140Z","shell.execute_reply.started":"2025-07-07T07:23:22.524100Z","shell.execute_reply":"2025-07-07T07:23:24.250572Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.4678 - loss: 1.5047\n","output_type":"stream"},{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"[1.5087577104568481, 0.4666999876499176]"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"y_pred = ann.predict(X_test)\ny_pred = [np.argmax(i) for i in y_pred]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:23:24.251992Z","iopub.execute_input":"2025-07-07T07:23:24.252296Z","iopub.status.idle":"2025-07-07T07:23:25.702002Z","shell.execute_reply.started":"2025-07-07T07:23:24.252276Z","shell.execute_reply":"2025-07-07T07:23:25.701340Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:23:25.702898Z","iopub.execute_input":"2025-07-07T07:23:25.703136Z","iopub.status.idle":"2025-07-07T07:23:25.732966Z","shell.execute_reply.started":"2025-07-07T07:23:25.703110Z","shell.execute_reply":"2025-07-07T07:23:25.732290Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.51      0.52      0.51      1000\n           1       0.68      0.53      0.60      1000\n           2       0.37      0.21      0.27      1000\n           3       0.30      0.39      0.34      1000\n           4       0.42      0.42      0.42      1000\n           5       0.40      0.36      0.38      1000\n           6       0.43      0.64      0.51      1000\n           7       0.62      0.42      0.50      1000\n           8       0.48      0.73      0.58      1000\n           9       0.61      0.45      0.52      1000\n\n    accuracy                           0.47     10000\n   macro avg       0.48      0.47      0.46     10000\nweighted avg       0.48      0.47      0.46     10000\n\n","output_type":"stream"}],"execution_count":47},{"cell_type":"markdown","source":"**CNN**","metadata":{}},{"cell_type":"code","source":"cnn = models.Sequential([\n    #CNN (Convulation+relu -> pooling)\n    layers.Conv2D(filters=32,kernel_size=(3,3),activation=\"relu\",input_shape=(32,32,3)),\n    layers.MaxPooling2D((3,3)),\n\n    layers.Conv2D(filters=32,kernel_size=(3,3),activation=\"relu\"),\n    layers.MaxPooling2D((3,3)),\n    #Dense Netwrok \n    layers.Flatten(),\n    layers.Dense(2000,activation=\"relu\"),\n    layers.Dense(1000,activation=\"relu\"),\n    layers.Dense(10,activation=\"softmax\")\n])\n\ncnn.compile(\n    optimizer=\"adam\",\n    loss=\"sparse_categorical_crossentropy\",\n    metrics=[\"accuracy\"]\n)\ncnn.fit(X_train,y_train,epochs=10)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:23:25.735003Z","iopub.execute_input":"2025-07-07T07:23:25.735192Z","iopub.status.idle":"2025-07-07T07:24:21.896016Z","shell.execute_reply.started":"2025-07-07T07:23:25.735178Z","shell.execute_reply":"2025-07-07T07:24:21.895178Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.3348 - loss: 1.7701\nEpoch 2/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.5280 - loss: 1.2976\nEpoch 3/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.5862 - loss: 1.1557\nEpoch 4/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.6275 - loss: 1.0425\nEpoch 5/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.6584 - loss: 0.9602\nEpoch 6/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.6857 - loss: 0.8764\nEpoch 7/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.7179 - loss: 0.7920\nEpoch 8/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.7480 - loss: 0.7075\nEpoch 9/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.7788 - loss: 0.6207\nEpoch 10/10\n\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.8058 - loss: 0.5398\n","output_type":"stream"},{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7a97fc1315d0>"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"cnn.evaluate(X_test,y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:24:21.897260Z","iopub.execute_input":"2025-07-07T07:24:21.897615Z","iopub.status.idle":"2025-07-07T07:24:23.809639Z","shell.execute_reply.started":"2025-07-07T07:24:21.897596Z","shell.execute_reply":"2025-07-07T07:24:23.808974Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.6469 - loss: 1.2040\n","output_type":"stream"},{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"[1.1877198219299316, 0.6491000056266785]"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"y_pred = cnn.predict(X_test)\ny_pred=[np.argmax(i) for i in y_pred]\ny_pred[:5]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:24:23.810322Z","iopub.execute_input":"2025-07-07T07:24:23.810539Z","iopub.status.idle":"2025-07-07T07:24:25.385245Z","shell.execute_reply.started":"2025-07-07T07:24:23.810522Z","shell.execute_reply":"2025-07-07T07:24:25.384392Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step\n","output_type":"stream"},{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"[3, 8, 8, 0, 4]"},"metadata":{}}],"execution_count":50},{"cell_type":"code","source":"print(classification_report(y_test,y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-07T07:24:25.386200Z","iopub.execute_input":"2025-07-07T07:24:25.386450Z","iopub.status.idle":"2025-07-07T07:24:25.414800Z","shell.execute_reply.started":"2025-07-07T07:24:25.386416Z","shell.execute_reply":"2025-07-07T07:24:25.414212Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.73      0.68      0.70      1000\n           1       0.82      0.76      0.79      1000\n           2       0.59      0.54      0.56      1000\n           3       0.46      0.41      0.44      1000\n           4       0.62      0.54      0.58      1000\n           5       0.54      0.61      0.58      1000\n           6       0.60      0.82      0.69      1000\n           7       0.77      0.64      0.70      1000\n           8       0.65      0.82      0.73      1000\n           9       0.76      0.68      0.72      1000\n\n    accuracy                           0.65     10000\n   macro avg       0.65      0.65      0.65     10000\nweighted avg       0.65      0.65      0.65     10000\n\n","output_type":"stream"}],"execution_count":51}]}
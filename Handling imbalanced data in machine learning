{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12388417,"sourceType":"datasetVersion","datasetId":7811733}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"Handling imbalanced data in machine learning","provenance":[]}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n# THEN FEEL FREE TO DELETE THIS CELL.\n# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n# NOTEBOOK.\nimport kagglehub\nmehrajalomtapadar_churn_dataset_path = kagglehub.dataset_download('mehrajalomtapadar/churn-dataset')\n\nprint('Data source import complete.')\n","metadata":{"id":"91bmZNTsymeO","outputId":"c20be07d-f7b2-4e87-bd89-77654d529435","colab":{"base_uri":"https://localhost:8080/"},"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:55.574102Z","iopub.execute_input":"2025-07-06T13:02:55.574502Z","iopub.status.idle":"2025-07-06T13:02:56.200917Z","shell.execute_reply.started":"2025-07-06T13:02:55.574474Z","shell.execute_reply":"2025-07-06T13:02:56.199763Z"}},"outputs":[{"name":"stdout","text":"Data source import complete.\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:56.202539Z","iopub.execute_input":"2025-07-06T13:02:56.202853Z","iopub.status.idle":"2025-07-06T13:02:56.619458Z","shell.execute_reply.started":"2025-07-06T13:02:56.202831Z","shell.execute_reply":"2025-07-06T13:02:56.618604Z"},"id":"9ybIxLIqymeQ","outputId":"75b0907c-d620-41ad-c3fa-92c5bfa3223d","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"name":"stdout","text":"/kaggle/input/churn-dataset/Churn_Modelling.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv(\"/kaggle/input/churn-dataset/Churn_Modelling.csv\")\ndf.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:56.620386Z","iopub.execute_input":"2025-07-06T13:02:56.620783Z","iopub.status.idle":"2025-07-06T13:02:57.431526Z","shell.execute_reply.started":"2025-07-06T13:02:56.620752Z","shell.execute_reply":"2025-07-06T13:02:57.430739Z"},"id":"6enlXrHBymeT","outputId":"685cb3f6-9e76-45ca-bd96-ff308f05f39e","colab":{"base_uri":"https://localhost:8080/","height":163}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n\n   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n0       2       0.00              1          1               1   \n1       1   83807.86              1          0               1   \n2       8  159660.80              3          1               0   \n\n   EstimatedSalary  Exited  \n0        101348.88       1  \n1        112542.58       0  \n2        113931.57       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"def Basic_Info(df):\n    print(\"Shape: \")\n    print(df.shape)\n    print(\"Random Sample :\")\n    print(df.sample(6))\n    print(\"Description :\")\n    print(df.describe())\n    print(\"INFO :\")\n    print(df.info())\n    print(\"Check For null values:\")\n    print(df.isnull().sum())\nBasic_Info(df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.433779Z","iopub.execute_input":"2025-07-06T13:02:57.434179Z","iopub.status.idle":"2025-07-06T13:02:57.498136Z","shell.execute_reply.started":"2025-07-06T13:02:57.434154Z","shell.execute_reply":"2025-07-06T13:02:57.497314Z"},"id":"S2BHABpBymeU","outputId":"d99d1d46-44f4-4621-de11-4b7854139bbf","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"name":"stdout","text":"Shape: \n(10000, 14)\nRandom Sample :\n      RowNumber  CustomerId     Surname  CreditScore Geography  Gender  Age  \\\n3762       3763    15643042         Han          590   Germany  Female   40   \n9742       9743    15620577        Wood          715    France    Male   45   \n4808       4809    15610755  Napolitano          643    France  Female   33   \n4498       4499    15777759     Boucaut          570    France    Male   30   \n8009       8010    15793803    Robinson          574    France    Male   34   \n8981       8982    15685805   Ginikanwa          673     Spain  Female   35   \n\n      Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n3762       2  117641.43              2          0               0   \n9742       4       0.00              2          1               1   \n4808       0  137811.75              1          1               1   \n4498       2  131406.56              1          1               1   \n8009       1  112572.39              1          0               0   \n8981       6       0.00              2          1               0   \n\n      EstimatedSalary  Exited  \n3762         92198.05       0  \n9742         55043.93       0  \n4808        184856.89       0  \n4498         47952.45       0  \n8009        165626.60       0  \n8981         98618.79       0  \nDescription :\n         RowNumber    CustomerId   CreditScore           Age        Tenure  \\\ncount  10000.00000  1.000000e+04  10000.000000  10000.000000  10000.000000   \nmean    5000.50000  1.569094e+07    650.528800     38.921800      5.012800   \nstd     2886.89568  7.193619e+04     96.653299     10.487806      2.892174   \nmin        1.00000  1.556570e+07    350.000000     18.000000      0.000000   \n25%     2500.75000  1.562853e+07    584.000000     32.000000      3.000000   \n50%     5000.50000  1.569074e+07    652.000000     37.000000      5.000000   \n75%     7500.25000  1.575323e+07    718.000000     44.000000      7.000000   \nmax    10000.00000  1.581569e+07    850.000000     92.000000     10.000000   \n\n             Balance  NumOfProducts    HasCrCard  IsActiveMember  \\\ncount   10000.000000   10000.000000  10000.00000    10000.000000   \nmean    76485.889288       1.530200      0.70550        0.515100   \nstd     62397.405202       0.581654      0.45584        0.499797   \nmin         0.000000       1.000000      0.00000        0.000000   \n25%         0.000000       1.000000      0.00000        0.000000   \n50%     97198.540000       1.000000      1.00000        1.000000   \n75%    127644.240000       2.000000      1.00000        1.000000   \nmax    250898.090000       4.000000      1.00000        1.000000   \n\n       EstimatedSalary        Exited  \ncount     10000.000000  10000.000000  \nmean     100090.239881      0.203700  \nstd       57510.492818      0.402769  \nmin          11.580000      0.000000  \n25%       51002.110000      0.000000  \n50%      100193.915000      0.000000  \n75%      149388.247500      0.000000  \nmax      199992.480000      1.000000  \nINFO :\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 10000 entries, 0 to 9999\nData columns (total 14 columns):\n #   Column           Non-Null Count  Dtype  \n---  ------           --------------  -----  \n 0   RowNumber        10000 non-null  int64  \n 1   CustomerId       10000 non-null  int64  \n 2   Surname          10000 non-null  object \n 3   CreditScore      10000 non-null  int64  \n 4   Geography        10000 non-null  object \n 5   Gender           10000 non-null  object \n 6   Age              10000 non-null  int64  \n 7   Tenure           10000 non-null  int64  \n 8   Balance          10000 non-null  float64\n 9   NumOfProducts    10000 non-null  int64  \n 10  HasCrCard        10000 non-null  int64  \n 11  IsActiveMember   10000 non-null  int64  \n 12  EstimatedSalary  10000 non-null  float64\n 13  Exited           10000 non-null  int64  \ndtypes: float64(2), int64(9), object(3)\nmemory usage: 1.1+ MB\nNone\nCheck For null values:\nRowNumber          0\nCustomerId         0\nSurname            0\nCreditScore        0\nGeography          0\nGender             0\nAge                0\nTenure             0\nBalance            0\nNumOfProducts      0\nHasCrCard          0\nIsActiveMember     0\nEstimatedSalary    0\nExited             0\ndtype: int64\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"df[\"EstimatedSalary\"].plot(kind=\"box\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.498723Z","iopub.execute_input":"2025-07-06T13:02:57.498925Z","iopub.status.idle":"2025-07-06T13:02:57.783047Z","shell.execute_reply.started":"2025-07-06T13:02:57.498908Z","shell.execute_reply":"2025-07-06T13:02:57.782145Z"},"id":"HJDAoIPFymeV","outputId":"79d9ff86-e6ab-4eb9-bf36-f582e8cb32a2","colab":{"base_uri":"https://localhost:8080/","height":448}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"df.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.783979Z","iopub.execute_input":"2025-07-06T13:02:57.784715Z","iopub.status.idle":"2025-07-06T13:02:57.797221Z","shell.execute_reply.started":"2025-07-06T13:02:57.784687Z","shell.execute_reply":"2025-07-06T13:02:57.796275Z"},"id":"gWdMX-hyymeV","outputId":"1ad771bf-1ae5-439b-cde6-7dd311de845f","colab":{"base_uri":"https://localhost:8080/","height":163}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n0          1    15634602  Hargrave          619    France  Female   42   \n1          2    15647311      Hill          608     Spain  Female   41   \n2          3    15619304      Onio          502    France  Female   42   \n\n   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n0       2       0.00              1          1               1   \n1       1   83807.86              1          0               1   \n2       8  159660.80              3          1               0   \n\n   EstimatedSalary  Exited  \n0        101348.88       1  \n1        112542.58       0  \n2        113931.57       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>RowNumber</th>\n      <th>CustomerId</th>\n      <th>Surname</th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>15634602</td>\n      <td>Hargrave</td>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>15647311</td>\n      <td>Hill</td>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>15619304</td>\n      <td>Onio</td>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"(df[\"EstimatedSalary\"] < 5000).value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.798226Z","iopub.execute_input":"2025-07-06T13:02:57.798645Z","iopub.status.idle":"2025-07-06T13:02:57.820601Z","shell.execute_reply.started":"2025-07-06T13:02:57.798611Z","shell.execute_reply":"2025-07-06T13:02:57.819761Z"},"id":"WbuYYaFmymeW","outputId":"ddd30c4f-b19c-4039-9915-485b92e912e4","colab":{"base_uri":"https://localhost:8080/","height":178}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"EstimatedSalary\nFalse    9736\nTrue      264\nName: count, dtype: int64"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"df =  df[df[\"EstimatedSalary\"] > 5000]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.821877Z","iopub.execute_input":"2025-07-06T13:02:57.822198Z","iopub.status.idle":"2025-07-06T13:02:57.837751Z","shell.execute_reply.started":"2025-07-06T13:02:57.822165Z","shell.execute_reply":"2025-07-06T13:02:57.836728Z"},"id":"3aVC5ipZymeW"},"outputs":[],"execution_count":8},{"cell_type":"code","source":"(df[\"EstimatedSalary\"] > 5000).value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.838789Z","iopub.execute_input":"2025-07-06T13:02:57.839042Z","iopub.status.idle":"2025-07-06T13:02:57.850685Z","shell.execute_reply.started":"2025-07-06T13:02:57.839023Z","shell.execute_reply":"2025-07-06T13:02:57.849828Z"},"id":"6MnpRCxHymeX","outputId":"b2a96c49-cb33-4f8e-8f9b-5e1163bc7c68","colab":{"base_uri":"https://localhost:8080/","height":147}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"EstimatedSalary\nTrue    9736\nName: count, dtype: int64"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"df[\"EstimatedSalary\"].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.947345Z","iopub.execute_input":"2025-07-06T13:02:57.947672Z","iopub.status.idle":"2025-07-06T13:02:57.959381Z","shell.execute_reply.started":"2025-07-06T13:02:57.947649Z","shell.execute_reply":"2025-07-06T13:02:57.958582Z"},"id":"aliZ7oBSymeX","outputId":"6d73858a-e6a8-4483-8edf-104392a4798f","colab":{"base_uri":"https://localhost:8080/","height":489}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"EstimatedSalary\n24924.92     2\n101348.88    1\n58076.52     1\n189310.27    1\n78088.17     1\n            ..\n139356.30    1\n121232.51    1\n6382.46      1\n158750.13    1\n38190.78     1\nName: count, Length: 9735, dtype: int64"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"df = df.drop([\"RowNumber\",\"CustomerId\",\"Surname\"],axis=\"columns\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.960159Z","iopub.execute_input":"2025-07-06T13:02:57.960408Z","iopub.status.idle":"2025-07-06T13:02:57.978843Z","shell.execute_reply.started":"2025-07-06T13:02:57.960382Z","shell.execute_reply":"2025-07-06T13:02:57.977944Z"},"id":"uDWMFCoRymeY"},"outputs":[],"execution_count":11},{"cell_type":"code","source":"df.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:57.979971Z","iopub.execute_input":"2025-07-06T13:02:57.980304Z","iopub.status.idle":"2025-07-06T13:02:58.003083Z","shell.execute_reply.started":"2025-07-06T13:02:57.980264Z","shell.execute_reply":"2025-07-06T13:02:58.002160Z"},"id":"Ux_U3khKymeY","outputId":"d9e3bb3f-1551-4394-93f2-566817511b48","colab":{"base_uri":"https://localhost:8080/","height":143}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"   CreditScore Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n0          619    France  Female   42       2       0.00              1   \n1          608     Spain  Female   41       1   83807.86              1   \n2          502    France  Female   42       8  159660.80              3   \n\n   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n0          1               1        101348.88       1  \n1          0               1        112542.58       0  \n2          1               0        113931.57       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>Spain</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>France</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"df[\"Geography\"].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.004128Z","iopub.execute_input":"2025-07-06T13:02:58.004580Z","iopub.status.idle":"2025-07-06T13:02:58.022067Z","shell.execute_reply.started":"2025-07-06T13:02:58.004535Z","shell.execute_reply":"2025-07-06T13:02:58.021243Z"},"id":"4ClLvrPMymeY","outputId":"ec1d1e54-fc3f-4289-aa1c-49fb47d5af86","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"array(['France', 'Spain', 'Germany'], dtype=object)"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndf[\"Geography\"] = le.fit_transform(df[\"Geography\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.022930Z","iopub.execute_input":"2025-07-06T13:02:58.023257Z","iopub.status.idle":"2025-07-06T13:02:58.117570Z","shell.execute_reply.started":"2025-07-06T13:02:58.023235Z","shell.execute_reply":"2025-07-06T13:02:58.116471Z"},"id":"38p0WMyEymeY"},"outputs":[],"execution_count":14},{"cell_type":"code","source":"df.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.118632Z","iopub.execute_input":"2025-07-06T13:02:58.118939Z","iopub.status.idle":"2025-07-06T13:02:58.131159Z","shell.execute_reply.started":"2025-07-06T13:02:58.118906Z","shell.execute_reply":"2025-07-06T13:02:58.130220Z"},"id":"Y3TnzhCpymeY","outputId":"e6769209-2581-43ef-b35b-f33b549acc0d","colab":{"base_uri":"https://localhost:8080/","height":143}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"   CreditScore  Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n0          619          0  Female   42       2       0.00              1   \n1          608          2  Female   41       1   83807.86              1   \n2          502          0  Female   42       8  159660.80              3   \n\n   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n0          1               1        101348.88       1  \n1          0               1        112542.58       0  \n2          1               0        113931.57       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>0</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>2</td>\n      <td>Female</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>0</td>\n      <td>Female</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"df[\"Gender\"] = le.fit_transform(df[\"Gender\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.132311Z","iopub.execute_input":"2025-07-06T13:02:58.132701Z","iopub.status.idle":"2025-07-06T13:02:58.150759Z","shell.execute_reply.started":"2025-07-06T13:02:58.132672Z","shell.execute_reply":"2025-07-06T13:02:58.149857Z"},"id":"zSOiAT-AymeZ"},"outputs":[],"execution_count":16},{"cell_type":"code","source":"df.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.151796Z","iopub.execute_input":"2025-07-06T13:02:58.152064Z","iopub.status.idle":"2025-07-06T13:02:58.176699Z","shell.execute_reply.started":"2025-07-06T13:02:58.152036Z","shell.execute_reply":"2025-07-06T13:02:58.175450Z"},"id":"ZwftOXSxymeZ","outputId":"4666b913-8d75-4021-825a-a991d766a9f2","colab":{"base_uri":"https://localhost:8080/","height":143}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"   CreditScore  Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n0          619          0       0   42       2       0.00              1   \n1          608          2       0   41       1   83807.86              1   \n2          502          0       0   42       8  159660.80              3   \n\n   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n0          1               1        101348.88       1  \n1          0               1        112542.58       0  \n2          1               0        113931.57       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>0</td>\n      <td>0</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>2</td>\n      <td>0</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>0</td>\n      <td>0</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nx = df.drop(\"Exited\",axis=\"columns\")\ny = df[\"Exited\"]\nX_train,X_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=1,stratify=y)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.177891Z","iopub.execute_input":"2025-07-06T13:02:58.178212Z","iopub.status.idle":"2025-07-06T13:02:58.395459Z","shell.execute_reply.started":"2025-07-06T13:02:58.178182Z","shell.execute_reply":"2025-07-06T13:02:58.394552Z"},"id":"AvpPiH1aymeZ"},"outputs":[],"execution_count":18},{"cell_type":"code","source":"X_train.shape,X_test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.396403Z","iopub.execute_input":"2025-07-06T13:02:58.396671Z","iopub.status.idle":"2025-07-06T13:02:58.402835Z","shell.execute_reply.started":"2025-07-06T13:02:58.396650Z","shell.execute_reply":"2025-07-06T13:02:58.401930Z"},"id":"EVazGoMUymeZ","outputId":"03d73d10-bb37-4683-f68b-70f17a594e75","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"((7788, 10), (1948, 10))"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"reg = LogisticRegression(max_iter=10000)\nreg.fit(X_train,y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.403801Z","iopub.execute_input":"2025-07-06T13:02:58.404133Z","iopub.status.idle":"2025-07-06T13:02:58.605282Z","shell.execute_reply.started":"2025-07-06T13:02:58.404100Z","shell.execute_reply":"2025-07-06T13:02:58.603103Z"},"id":"PQi4jvAuymeZ","outputId":"95debf72-61bb-4d04-f462-50c27fb7e41d","colab":{"base_uri":"https://localhost:8080/","height":80}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=10000)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=10000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=10000)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"reg.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.605972Z","iopub.execute_input":"2025-07-06T13:02:58.606244Z","iopub.status.idle":"2025-07-06T13:02:58.621502Z","shell.execute_reply.started":"2025-07-06T13:02:58.606223Z","shell.execute_reply":"2025-07-06T13:02:58.620670Z"},"id":"Z__Ipn52ymeZ","outputId":"50b5ef8e-268f-41d4-96f3-a62bce91460d","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"array([0, 0, 0, ..., 0, 0, 0])"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"reg.score(X_test,y_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.622157Z","iopub.execute_input":"2025-07-06T13:02:58.622480Z","iopub.status.idle":"2025-07-06T13:02:58.661305Z","shell.execute_reply.started":"2025-07-06T13:02:58.622453Z","shell.execute_reply":"2025-07-06T13:02:58.660524Z"},"id":"Shnpb2IaymeZ","outputId":"6f701d6e-736f-40be-8821-6d3857f6a5d0","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"0.7890143737166324"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"y_pred = reg.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:58.662279Z","iopub.execute_input":"2025-07-06T13:02:58.662567Z","iopub.status.idle":"2025-07-06T13:02:58.686196Z","shell.execute_reply.started":"2025-07-06T13:02:58.662544Z","shell.execute_reply":"2025-07-06T13:02:58.684115Z"},"id":"3hcpeLhaymea"},"outputs":[],"execution_count":23},{"cell_type":"code","source":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,y_pred))","metadata":{"trusted":true,"id":"FadJVZeEymea","outputId":"843d9c5f-9f2a-46af-a532-10d9bcb88302","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:58.686891Z","iopub.execute_input":"2025-07-06T13:02:58.687138Z","iopub.status.idle":"2025-07-06T13:02:58.713613Z","shell.execute_reply.started":"2025-07-06T13:02:58.687118Z","shell.execute_reply":"2025-07-06T13:02:58.712333Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.80      0.98      0.88      1549\n           1       0.37      0.04      0.08       399\n\n    accuracy                           0.79      1948\n   macro avg       0.58      0.51      0.48      1948\nweighted avg       0.71      0.79      0.72      1948\n\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":" df.head(3)","metadata":{"trusted":true,"id":"jP_2V9n4ymea","outputId":"eaec21a4-2ce2-4a11-ffc4-ce2c3aeb10dc","colab":{"base_uri":"https://localhost:8080/","height":143},"execution":{"iopub.status.busy":"2025-07-06T13:02:58.714549Z","iopub.execute_input":"2025-07-06T13:02:58.714846Z","iopub.status.idle":"2025-07-06T13:02:58.726520Z","shell.execute_reply.started":"2025-07-06T13:02:58.714818Z","shell.execute_reply":"2025-07-06T13:02:58.725547Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"   CreditScore  Geography  Gender  Age  Tenure    Balance  NumOfProducts  \\\n0          619          0       0   42       2       0.00              1   \n1          608          2       0   41       1   83807.86              1   \n2          502          0       0   42       8  159660.80              3   \n\n   HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n0          1               1        101348.88       1  \n1          0               1        112542.58       0  \n2          1               0        113931.57       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CreditScore</th>\n      <th>Geography</th>\n      <th>Gender</th>\n      <th>Age</th>\n      <th>Tenure</th>\n      <th>Balance</th>\n      <th>NumOfProducts</th>\n      <th>HasCrCard</th>\n      <th>IsActiveMember</th>\n      <th>EstimatedSalary</th>\n      <th>Exited</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>619</td>\n      <td>0</td>\n      <td>0</td>\n      <td>42</td>\n      <td>2</td>\n      <td>0.00</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>101348.88</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>608</td>\n      <td>2</td>\n      <td>0</td>\n      <td>41</td>\n      <td>1</td>\n      <td>83807.86</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>112542.58</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>502</td>\n      <td>0</td>\n      <td>0</td>\n      <td>42</td>\n      <td>8</td>\n      <td>159660.80</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113931.57</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"df[\"Exited\"].value_counts()","metadata":{"trusted":true,"id":"JyCKjJxbymea","outputId":"8b4dae7a-02ac-43b9-9771-299b18dcf72a","colab":{"base_uri":"https://localhost:8080/","height":178},"execution":{"iopub.status.busy":"2025-07-06T13:02:58.727550Z","iopub.execute_input":"2025-07-06T13:02:58.727873Z","iopub.status.idle":"2025-07-06T13:02:58.750561Z","shell.execute_reply.started":"2025-07-06T13:02:58.727849Z","shell.execute_reply":"2025-07-06T13:02:58.749578Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"Exited\n0    7741\n1    1995\nName: count, dtype: int64"},"metadata":{}}],"execution_count":26},{"cell_type":"markdown","source":"# ****Undersampling****","metadata":{"id":"VlAlD2AZymea"}},{"cell_type":"code","source":"df1_0 = df[df[\"Exited\"]==0].sample(1995)","metadata":{"trusted":true,"id":"CSDzM5IAymeb","execution":{"iopub.status.busy":"2025-07-06T13:02:58.751779Z","iopub.execute_input":"2025-07-06T13:02:58.752129Z","iopub.status.idle":"2025-07-06T13:02:58.771463Z","shell.execute_reply.started":"2025-07-06T13:02:58.752101Z","shell.execute_reply":"2025-07-06T13:02:58.770415Z"}},"outputs":[],"execution_count":27},{"cell_type":"code","source":"df1_1 = df[df[\"Exited\"] == 1]","metadata":{"trusted":true,"id":"rG6uAwbcymeb","execution":{"iopub.status.busy":"2025-07-06T13:02:58.776558Z","iopub.execute_input":"2025-07-06T13:02:58.776829Z","iopub.status.idle":"2025-07-06T13:02:58.790782Z","shell.execute_reply.started":"2025-07-06T13:02:58.776811Z","shell.execute_reply":"2025-07-06T13:02:58.789833Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"new_df0 = pd.concat([df1_0,df1_1],axis=0)","metadata":{"trusted":true,"id":"y07TnUsiymeb","execution":{"iopub.status.busy":"2025-07-06T13:02:58.791673Z","iopub.execute_input":"2025-07-06T13:02:58.792001Z","iopub.status.idle":"2025-07-06T13:02:58.814330Z","shell.execute_reply.started":"2025-07-06T13:02:58.791972Z","shell.execute_reply":"2025-07-06T13:02:58.813293Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"new_df0.shape","metadata":{"trusted":true,"id":"IIHDWSJgymeb","outputId":"14a79c3c-6c60-46aa-befd-e12afde11223","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:58.815451Z","iopub.execute_input":"2025-07-06T13:02:58.815786Z","iopub.status.idle":"2025-07-06T13:02:58.837398Z","shell.execute_reply.started":"2025-07-06T13:02:58.815764Z","shell.execute_reply":"2025-07-06T13:02:58.836476Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"(3990, 11)"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"x1 = new_df0.drop(\"Exited\",axis=\"columns\")\ny1 = new_df0[\"Exited\"]\nX1_train,X1_test,y1_train,y1_test = train_test_split(x1,y1,test_size=0.2,random_state=1,stratify=y1)","metadata":{"trusted":true,"id":"5h4GW8rbymeb","execution":{"iopub.status.busy":"2025-07-06T13:02:58.838295Z","iopub.execute_input":"2025-07-06T13:02:58.838739Z","iopub.status.idle":"2025-07-06T13:02:58.860060Z","shell.execute_reply.started":"2025-07-06T13:02:58.838714Z","shell.execute_reply":"2025-07-06T13:02:58.859194Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"reg1 = LogisticRegression(max_iter=10000)\nreg1.fit(X1_train,y1_train)","metadata":{"trusted":true,"id":"dfcMX5UBymeb","outputId":"d588108e-4b3a-4828-c053-699f972ca6b1","colab":{"base_uri":"https://localhost:8080/","height":80},"execution":{"iopub.status.busy":"2025-07-06T13:02:58.861135Z","iopub.execute_input":"2025-07-06T13:02:58.861551Z","iopub.status.idle":"2025-07-06T13:02:58.999421Z","shell.execute_reply.started":"2025-07-06T13:02:58.861525Z","shell.execute_reply":"2025-07-06T13:02:58.998617Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=10000)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=10000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=10000)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"y1_pred = reg1.predict(X1_test)\nprint(classification_report(y1_test,y1_pred))","metadata":{"trusted":true,"id":"ZVS0EG8Vymec","outputId":"4751c534-4077-4cc9-cfff-5101360c8cba","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.000515Z","iopub.execute_input":"2025-07-06T13:02:59.000815Z","iopub.status.idle":"2025-07-06T13:02:59.023469Z","shell.execute_reply.started":"2025-07-06T13:02:59.000793Z","shell.execute_reply":"2025-07-06T13:02:59.022652Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.67      0.66      0.66       399\n           1       0.67      0.68      0.67       399\n\n    accuracy                           0.67       798\n   macro avg       0.67      0.67      0.67       798\nweighted avg       0.67      0.67      0.67       798\n\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"id":"4BNoopZqymec","outputId":"ef4754cf-c1cd-456c-8e0b-8768cdb05e70","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.024319Z","iopub.execute_input":"2025-07-06T13:02:59.026720Z","iopub.status.idle":"2025-07-06T13:02:59.038208Z","shell.execute_reply.started":"2025-07-06T13:02:59.026687Z","shell.execute_reply":"2025-07-06T13:02:59.037518Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"(9736, 11)"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"not_exited,exited = df[\"Exited\"].value_counts()\nnot_exited,exited","metadata":{"trusted":true,"id":"LL3oAy9nymec","outputId":"5ec50fa4-539d-4e9c-ba13-a0a0222dc989","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.039052Z","iopub.execute_input":"2025-07-06T13:02:59.039380Z","iopub.status.idle":"2025-07-06T13:02:59.061527Z","shell.execute_reply.started":"2025-07-06T13:02:59.039337Z","shell.execute_reply":"2025-07-06T13:02:59.060506Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"(7741, 1995)"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"df_class_1 = df[df[\"Exited\"] == 1]\ndf_class_1.shape","metadata":{"trusted":true,"id":"3TV3TSdpymec","outputId":"24c391d8-6af5-4ba6-9581-26a7d592171c","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.064854Z","iopub.execute_input":"2025-07-06T13:02:59.066828Z","iopub.status.idle":"2025-07-06T13:02:59.078520Z","shell.execute_reply.started":"2025-07-06T13:02:59.066797Z","shell.execute_reply":"2025-07-06T13:02:59.077730Z"}},"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"(1995, 11)"},"metadata":{}}],"execution_count":36},{"cell_type":"code","source":"df_class_0 = df[df[\"Exited\"] == 0]\ndf_class_0.shape","metadata":{"trusted":true,"id":"2cb9qzQPymec","outputId":"51b1e902-2619-4df8-9e3c-37762246ec16","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.079166Z","iopub.execute_input":"2025-07-06T13:02:59.079717Z","iopub.status.idle":"2025-07-06T13:02:59.100148Z","shell.execute_reply.started":"2025-07-06T13:02:59.079688Z","shell.execute_reply":"2025-07-06T13:02:59.099437Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"(7741, 11)"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"df_class_1 = df_class_1.sample(not_exited,replace=True)\ndf_class_1.shape","metadata":{"trusted":true,"id":"DfYtmvFmymec","outputId":"f97606a7-fc40-48dd-902a-934b22c99de6","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.100777Z","iopub.execute_input":"2025-07-06T13:02:59.101035Z","iopub.status.idle":"2025-07-06T13:02:59.120148Z","shell.execute_reply.started":"2025-07-06T13:02:59.101015Z","shell.execute_reply":"2025-07-06T13:02:59.119172Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"(7741, 11)"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"new_df1 = pd.concat([df_class_0,df_class_1],axis=0)\nnew_df1.shape","metadata":{"trusted":true,"id":"oUhy3lfDymeg","outputId":"96522c8d-f9bd-48cd-a844-34b46f5908f4","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.121059Z","iopub.execute_input":"2025-07-06T13:02:59.121500Z","iopub.status.idle":"2025-07-06T13:02:59.138852Z","shell.execute_reply.started":"2025-07-06T13:02:59.121475Z","shell.execute_reply":"2025-07-06T13:02:59.137952Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"(15482, 11)"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"print(new_df1[\"Exited\"].value_counts())","metadata":{"trusted":true,"id":"w2XjtA6Cymeh","outputId":"096946de-1846-4da5-f06e-1c75c39d7ffb","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.139720Z","iopub.execute_input":"2025-07-06T13:02:59.139973Z","iopub.status.idle":"2025-07-06T13:02:59.154729Z","shell.execute_reply.started":"2025-07-06T13:02:59.139952Z","shell.execute_reply":"2025-07-06T13:02:59.153677Z"}},"outputs":[{"name":"stdout","text":"Exited\n0    7741\n1    7741\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"reg2 = LogisticRegression()\nx2 = new_df1.drop(\"Exited\",axis=\"columns\")\ny2 = new_df1[\"Exited\"]\nX2_train,X2_test,y2_train,y2_test = train_test_split(x2,y2,test_size=0.2,random_state=1,stratify=y2)\nreg2 = LogisticRegression(max_iter=100000)\nreg2.fit(X2_train,y2_train)","metadata":{"trusted":true,"id":"gd8Ea5Niymeh","outputId":"b464688b-c712-43c1-97e6-12af611da491","colab":{"base_uri":"https://localhost:8080/","height":80},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.155858Z","iopub.execute_input":"2025-07-06T13:02:59.156214Z","iopub.status.idle":"2025-07-06T13:02:59.334201Z","shell.execute_reply.started":"2025-07-06T13:02:59.156185Z","shell.execute_reply":"2025-07-06T13:02:59.332400Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=100000)","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=100000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=100000)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"y2_pred = reg2.predict(X2_test)\nprint(classification_report(y2_test,y2_pred))","metadata":{"trusted":true,"id":"4rsQJi-Wymeh","outputId":"73ea3255-d4e4-4197-fdb6-176f12c3ae0f","colab":{"base_uri":"https://localhost:8080/"},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.334900Z","iopub.execute_input":"2025-07-06T13:02:59.335141Z","iopub.status.idle":"2025-07-06T13:02:59.369235Z","shell.execute_reply.started":"2025-07-06T13:02:59.335122Z","shell.execute_reply":"2025-07-06T13:02:59.368417Z"}},"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           0       0.66      0.64      0.65      1548\n           1       0.65      0.67      0.66      1549\n\n    accuracy                           0.66      3097\n   macro avg       0.66      0.66      0.66      3097\nweighted avg       0.66      0.66      0.66      3097\n\n","output_type":"stream"}],"execution_count":42},{"cell_type":"markdown","source":"# SMOTE","metadata":{"id":"O-ke-Kj8ymeh"}},{"cell_type":"code","source":"\n# !pip install -U scikit-learn==1.4.2 imbalanced-learn==0.12.2 --quiet\n# import os\n# os.kill(os.getpid(), 9)","metadata":{"trusted":true,"id":"6JCv56dSymeh","execution":{"iopub.status.busy":"2025-07-06T13:02:59.370931Z","iopub.execute_input":"2025-07-06T13:02:59.371221Z","iopub.status.idle":"2025-07-06T13:02:59.377879Z","shell.execute_reply.started":"2025-07-06T13:02:59.371196Z","shell.execute_reply":"2025-07-06T13:02:59.377090Z"}},"outputs":[],"execution_count":43},{"cell_type":"code","source":"X3 = df.drop(\"Exited\",axis='columns')\ny3 = df[\"Exited\"]\nfrom imblearn.over_sampling import SMOTE\n\n\nsmote = SMOTE(sampling_strategy='minority')\nX_sm, y_sm = smote.fit_resample(X3, y3)\n\n\ny_sm.value_counts()","metadata":{"trusted":true,"id":"iHqg57yMymeh","outputId":"e1c0da8d-4711-484e-e165-e1a84a190929","colab":{"base_uri":"https://localhost:8080/","height":178},"execution":{"iopub.status.busy":"2025-07-06T13:02:59.378788Z","iopub.execute_input":"2025-07-06T13:02:59.379146Z","iopub.status.idle":"2025-07-06T13:02:59.585501Z","shell.execute_reply.started":"2025-07-06T13:02:59.379121Z","shell.execute_reply":"2025-07-06T13:02:59.584122Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/1221172136.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mX3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Exited\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'columns'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0my3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Exited\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mimblearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mover_sampling\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSMOTE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/imblearn/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     50\u001b[0m     \u001b[0;31m# process, as it may not be compiled yet\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m     from . import (\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0mcombine\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m         \u001b[0mensemble\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/imblearn/combine/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \"\"\"\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0m_smote_enn\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSMOTEENN\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0m_smote_tomek\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSMOTETomek\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/imblearn/combine/_smote_enn.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseSampler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mover_sampling\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSMOTE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;34m.\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mover_sampling\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseOverSampler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/imblearn/base.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbase\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBaseEstimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mOneToOneFeatureMixin\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mlabel_binarize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_metadata_requests\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mMETHODS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmulticlass\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcheck_classification_targets\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'sklearn.utils._metadata_requests'"],"ename":"ModuleNotFoundError","evalue":"No module named 'sklearn.utils._metadata_requests'","output_type":"error"}],"execution_count":44},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX3_train, X3_test, y3_train, y3_test = train_test_split(X_sm, y_sm, test_size=0.2, random_state=15, stratify=y_sm)\ny3_train.value_counts()","metadata":{"id":"VvvWXzAEzcMy","outputId":"618ace26-eb05-4f5b-8129-728337820c87","colab":{"base_uri":"https://localhost:8080/","height":178},"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:59.586624Z","iopub.status.idle":"2025-07-06T13:02:59.587144Z","shell.execute_reply.started":"2025-07-06T13:02:59.586833Z","shell.execute_reply":"2025-07-06T13:02:59.586975Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"reg3 = LogisticRegression(max_iter=100000)\nreg3.fit(X3_train,y3_train)","metadata":{"id":"IMhjjdMSzwe4","outputId":"210f5b60-d5aa-457b-8b3a-981f6eb5bb08","colab":{"base_uri":"https://localhost:8080/","height":80},"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:59.588794Z","iopub.status.idle":"2025-07-06T13:02:59.589080Z","shell.execute_reply.started":"2025-07-06T13:02:59.588957Z","shell.execute_reply":"2025-07-06T13:02:59.588968Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y3_pred = reg3.predict(X3_test)\nprint(classification_report(y3_test,y3_pred))","metadata":{"id":"DvOEfjxAz6Zi","outputId":"e5420285-eda4-4464-ab6c-11997598b4cf","colab":{"base_uri":"https://localhost:8080/"},"trusted":true,"execution":{"iopub.status.busy":"2025-07-06T13:02:59.589975Z","iopub.status.idle":"2025-07-06T13:02:59.590372Z","shell.execute_reply.started":"2025-07-06T13:02:59.590179Z","shell.execute_reply":"2025-07-06T13:02:59.590197Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**There are some issue with importing SMOTE**\nyou can refer to give below link to see the report i have generated from google colab","metadata":{}},{"cell_type":"markdown","source":"https://ibb.co/7xvcYMST","metadata":{},"attachments":{"21341f56-ad46-4a6f-9c56-69f7de97248f.png":{"image/png":""}}},{"cell_type":"code","source":"\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}